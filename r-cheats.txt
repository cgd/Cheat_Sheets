# attach and detach a package:
library("MouseDivGeno")
detach(package:MouseDivGeno)

# start in 64 bit mode:
R --arch x86_64

# Stack-trace in R:
traceback()

# Break on error in R:
options(error = recover)

# Turn warnings into errors
options(warn = 2)

# Acts as a code break-point so you can inspect vars
browser()

# trim off the 1st and last chars of a string:
substr("hello", start=2, stop=nchar("hello") - 1)

# the apply most similar to haskell's (map f [1..20])
mapply(f, 1:20)
# if you would rather have a vector than a list you can do
sapply(f, 1:20)
# Here is the R version of haskell's zipWith
mapply(get("+"), as.list(1 : 10), as.list(31: 40), SIMPLIFY = F)
# apply a function to matrix margins first by row then by column
apply(matrix(1:12, nrow = 3), 1, sum)
apply(matrix(1:12, nrow = 3), 2, sum)

# find difference between neighboring values
diff(1:10) # returns nine 1s

# Run Length Encoding
rle(...)
inverse.rle(...)

# replace file extension with empty string
sub("\\..*$", "", "helloworld.exe")

# find string manipulation functions
help.search(keyword="character")

# Find all installed packages matching a substring
grep("MouseDivGeno",rownames(installed.packages()), value = T)

# file stuff
myPath <- file.path(baseDir, "tmp.txt")
if(file.exists(myPath))
{
  con <- file(description = myPath, open = "rt") # open can be: rt, wt, rb, rb, at ...
  ... do something ...
  close(con)
}
dir.create("some-dir-name")

# Setting and getting using character names
assign("varname", matrix(1 : 10))
get("varname")

# setting terminal width
options(width=Sys.getenv("COLUMNS"))

# shuffle a vector
sample(1 : 30)

# machine specific info like maximum integer
.Machine$integer.max

####################
# Performance Tips #
####################

# crossprod(x,y) is faster than t(x) %*% y

> x = matrix(rnorm(1000), 100, 10)
> y = matrix(rnorm(1000), 100, 10)
> system.time(for(i in 1:10000) {  t(x) %*% y })
   user  system elapsed 
  0.383   0.006   0.389 
> system.time(for(i in 1:10000) {  crossprod(x, y) })
   user  system elapsed 
  0.165   0.001   0.166 

# When subtracting a vector from each *row* of a matrix, subtracting a matrix is faster than apply(x, 2, "-", y) or sweep(x, 1, y)

> x = matrix(rnorm(1000), 100, 10)
> y = rnorm(10)
> system.time(for(i in 1:10000) { apply(x, 1, "-", y) })
   user  system elapsed 
  9.390   0.061   9.427
> system.time(for(i in 1:10000) { sweep(x, 2, y) })
   user  system elapsed 
  1.178   0.009   1.184 
> system.time(for(i in 1:10000) { x - matrix(y, nrow(x), ncol(x), byrow = T) })
   user  system elapsed 
  0.233   0.002   0.235 

# Showing the all three methods produce the same result.
> all(t(apply(x, 1, "-", y)) == x - matrix(y, nrow(x), ncol(x), byrow = T))
[1] TRUE
> all(sweep(x, 2, y) == x - matrix(y, nrow(x), ncol(x), byrow = T))
[1] TRUE

# When subtracting a vector from each *column* of a matrix, x - y is faster than apply(x, 1, "-", y) or sweep(x, 2, y)

> x = matrix(rnorm(1000), 100, 10)
> y = rnorm(100)
> system.time(for(i in 1:10000) { apply(x, 2, "-", y) })
   user  system elapsed 
  2.985   0.024   3.039 
> system.time(for(i in 1:10000) { sweep(x, 1, y) })
   user  system elapsed 
  1.180   0.008   1.187  
> system.time(for(i in 1:10000) { x - y })
   user  system elapsed 
  0.070   0.001   0.071 

# Showing the all three methods produce the same result.
> all(apply(x, 2, "-", y) == x - y)
[1] TRUE
> all(sweep(x, 1, y) == x - y)
[1] TRUE

Creating binary packages on windows:
====================================
 * Install latest version of R (choosing non-default install location is OK)
 * Install latest version of Rtools (refer to http://cran.r-project.org/doc/manuals/R-admin.html#The-Windows-toolset)
 * make sure that the R and Rtools bin dirs are on your %PATH%
 * If you have your R code in a tarball or zip file you need to unzip it.
 * Enter: "Rcmd check <package_src_dir>" to check on any package errors or warnings
 * Enter: "Rcmd build --binary <package_src_dir>" on the command line
